// FONTES
@mixin font-oxygen {
	font-family: 'Oxygen', sans-serif, arial;
}

@mixin font-anonymous {
	font-family: 'Anonymous Pro', sans-serif;
}

@mixin font-size-mini {
	font-size: $fontSizeMini;
}

@mixin font-size-small {
	font-size: $fontSizeSmall;
}

@mixin font-size-medium {
	font-size: $fontSizeMedium;
}

@mixin font-size-large {
	font-size: $fontSizeLarge;
}

@mixin font-size-x-large {
	font-size: $fontSizeXLarge;
}

// CSS
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	 -khtml-border-radius: $radius;
 	 	 -moz-border-radius: $radius;
					border-radius: $radius;
}

@mixin box-shadow($color, $hoffset, $voffset, $blur) {
  -webkit-box-shadow: $color $hoffset $voffset $blur;
  	 -moz-box-shadow: $color $hoffset $voffset $blur;
  				box-shadow: $color $hoffset $voffset $blur;
}


// transition
@mixin transition($property, $duration, $ms) {
	-webkit-transition: $property $duration $ms;
		 -moz-transition: $property $duration $ms;
			 -o-transition: $property $duration $ms;
}

// returns unitless number
@function remove-unit($number) {
	$unit: unit($number);
	$one: 1;
	
	@if $unit == 'px' { $one: 1px; }
	@if $unit == 'em' { $one: 1em; }
	@if $unit == '%' { $one: 1%; }
	
	@return $number / $one;
}

// returns flexible value
// returns 'em' by default, accepts '%' as format
@function flex($target, $context: 16, $unit: 'em') {
	$size: remove-unit($target) / remove-unit($context);
	
	@if $unit == 'em' { @return #{$size}em; }
	@if $unit == '%' { @return percentage($size); }
}

// alias to 'flex' function, using '%' as format
@function perc($target, $context: 16) {
	@return flex($target, $context, '%');
}

// alias to 'flex' function, using '%' as format
@function em($target, $context: 16) {
	@return flex($target, $context, 'em');
}